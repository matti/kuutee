
# https://github.com/torizon/torizon-containers/blob/stable/debian-docker-images/wayland-base/Dockerfile

FROM debian:bookworm AS base

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    apt-utils \
    && apt-get -y upgrade \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    libwayland-client0 \
    libwayland-server0 \
    libglx-mesa0 \
    libegl1 \
    mesa-utils-extra \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# Make sure the user can access DRM and video devices
RUN usermod -a -G video,render torizon

ENV WAYLAND_USER="torizon"
ENV XDG_RUNTIME_DIR="/tmp/1000-runtime-dir"
ENV WAYLAND_DISPLAY="wayland-0"
ENV DISPLAY=":0"

# https://github.com/torizon/torizon-containers/blob/stable/debian-docker-images/wayland-base-vivante/Dockerfile
# + nxp-eula.sh
RUN apt-get -y update && apt-get install -y --no-install-recommends \
    apt-utils \
    curl \
    html2text \
    && apt-get -y upgrade \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

ARG LIC_URL=https://www.nxp.com/docs/en/disclaimer/LA_OPT_NXP_SW.html
ARG LIC_FILE_HTML=LA_OPT_NXP_SW.html
ARG LIC_FILE_TXT=LA_OPT_NXP_SW.txt
RUN curl -sSf ${LIC_URL} --output /etc/${LIC_FILE_HTML} \
    && html2text -o /etc/${LIC_FILE_TXT} /etc/${LIC_FILE_HTML} \
    && grep -q "NXP Software License Agreement" /etc/${LIC_FILE_TXT}
ARG ACCEPT_FSL_EULA=0
RUN if [ "${ACCEPT_FSL_EULA}" != "1" ];then \
    echo "Error: This image contains Vivante Packages."; \
    echo "Use --build-arg ACCEPT_FSL_EULA=1 to accept Vivante EULA"; \
    exit 1; \
    else \
    echo "INFO: Vivante EULA has been accepted!"; \
    fi

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    libwayland-client0 \
    libwayland-server0 \
    imx-gpu-viv-wayland \
    libg2d-dpu \
    libg2d-viv \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# Make sure the user can access DRM and video devices
RUN usermod -a -G video,render torizon

ENV WAYLAND_USER="torizon"
ENV XDG_RUNTIME_DIR="/tmp/1000-runtime-dir"
ENV WAYLAND_DISPLAY="wayland-0"
ENV DISPLAY=":0"

COPY nxp-eula.sh /etc/profile.d/nxp-eula.sh

# workaround "Failed to load module: /usr/lib/libgbm.so" error in downstream weston.
RUN ln -s /usr/lib/aarch64-linux-gnu/libgbm.so /usr/lib/libgbm.so

CMD [ "bash", "-l" ]

# https://github.com/torizon/torizon-containers/blob/stable/debian-docker-images/qt6-wayland/Dockerfile
# + kms-setup.sh

COPY kms-setup.sh /usr/bin/kms-setup.sh

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    apt-utils \
    && apt-get -y upgrade \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# KUUTEE: skip these
# # Install remaining dependencies required to run qtbase
# RUN apt-get -y update && apt-get install -y --no-install-recommends \
#     libqt6gui6 \
#     libfontconfig1-dev \
#     libqt6concurrent6 \
#     libqt6dbus6 \
#     libqt6network6 \
#     libqt6printsupport6 \
#     libqt6sql6 \
#     libqt6test6 \
#     libqt6widgets6 \
#     libqt6xml6 \
#     libqt6qml6 \
#     libqt6opengl6 \
#     libqt6quicktest6 \
#     libqt6quickwidgets6 \
#     qt6-wayland \
#     && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# KUUTEE: start own build tools and build
# KUUTEE: libfontconfig1-dev libwayland-dev are guesses
RUN set -eux ; \
    apt-get update ; apt-get install -y --no-install-recommends \
    wget curl git ca-certificates xz-utils \
    libfontconfig1-dev libwayland-dev \
    build-essential cmake python3

RUN set -eux ; \
    mkdir /ghjk ; cd /ghjk ; \
    wget https://download.qt.io/official_releases/qt/6.6/6.6.2/single/qt-everywhere-src-6.6.2.tar.xz ; \
    tar -xvof qt-everywhere-src-6.6.2.tar.xz ; \
    mkdir build ; cd build ; \
    ../qt-everywhere-src-6.6.2/configure -static ; \
    cmake --build . --parallel ; \
    cmake --install . ; \
    rm -rf /ghjk

# KUUTEE: end own build tools and build

ENV QT_QPA_PLATFORM="wayland"

# EGLFS configuration
ENV QT_QPA_EGLFS_INTEGRATION="eglfs_kms"
ENV QT_QPA_EGLFS_KMS_ATOMIC="1"
ENV QT_QPA_EGLFS_KMS_CONFIG="/etc/kms.conf"
